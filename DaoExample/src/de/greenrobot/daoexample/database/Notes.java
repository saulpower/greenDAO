package de.greenrobot.daoexample.database;

import java.util.List;
import de.greenrobot.dao.sync.GreenSync;
import com.google.gson.reflect.TypeToken;
import de.greenrobot.daoexample.database.NoteType;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table NOTES.
 */
public class Notes extends SyncBase  {

    private transient Long syncBaseId;
    /** Not-null value. */
    private String name;
    private String comment;
    private transient Long id;
    private NoteType type;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient NotesDao myDao;

    public Notes() {
    }

    public Notes(Long id) {
        this.id = id;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    Notes(Long syncBaseId, String name, String comment, Long id, NoteType type) {
        this.syncBaseId = syncBaseId;
        this.name = name;
        this.comment = comment;
        this.id = id;
        this.type = type;
    }

    public Notes(String name, String comment, Long id, NoteType type) {
        this.name = name;
        this.comment = comment;
        this.id = id;
        this.type = type;
        setDerivedEntityType(getClass().getCanonicalName());
    }

    /** called by internal mechanisms, do not call yourself. */
    @Override
    public void __setDaoSession(DaoSession daoSession) {
        super.__setDaoSession(daoSession);
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNotesDao() : null;
    }

    public Long getSyncBaseId() {
        return syncBaseId;
    }

    public void setSyncBaseId(Long syncBaseId) {
        this.syncBaseId = syncBaseId;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public NoteType getType() {
        return type;
    }

    public void setType(NoteType type) {
        this.type = type;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    static {
        GreenSync.registerListTypeToken("Notes", new TypeToken<List<Notes>>(){}.getType());
        GreenSync.registerTypeToken("Notes", Notes.class);
    }

}